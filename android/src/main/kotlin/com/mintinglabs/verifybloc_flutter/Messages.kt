// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mintinglabs.verifybloc_flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class VerifyblocStyle(val raw: Int) {
  LIGHT(0),
  DARK(1);

  companion object {
    fun ofRaw(raw: Int): VerifyblocStyle? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class VerifyblocTheme (
  val style: VerifyblocStyle,
  val mainColor: Long? = null,
  val buttonStyle: VerifyblocButtonTheme? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): VerifyblocTheme {
      val style = VerifyblocStyle.ofRaw(list[0] as Int)!!
      val mainColor = list[1].let { if (it is Int) it.toLong() else it as Long? }
      val buttonStyle: VerifyblocButtonTheme? = (list[2] as List<Any?>?)?.let {
        VerifyblocButtonTheme.fromList(it)
      }
      return VerifyblocTheme(style, mainColor, buttonStyle)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      style.raw,
      mainColor,
      buttonStyle?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class VerifyblocButtonTheme (
  val color: Long? = null,
  val gradient: IntArray? = null,
  val textColor: Long? = null,
  val borderRadius: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): VerifyblocButtonTheme {
      val color = list[0].let { if (it is Int) it.toLong() else it as Long? }
      val gradient = list[1] as IntArray?
      val textColor = list[2].let { if (it is Int) it.toLong() else it as Long? }
      val borderRadius = list[3] as Double?
      return VerifyblocButtonTheme(color, gradient, textColor, borderRadius)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      color,
      gradient,
      textColor,
      borderRadius,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object VerifyblocFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VerifyblocButtonTheme.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VerifyblocTheme.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is VerifyblocButtonTheme -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is VerifyblocTheme -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface VerifyblocFlutterApi {
  fun initialize(partnerId: String, appId: String, privateKey: String)
  fun startVerification(userId: String, identityType: Long)
  fun setEnv(env: Long)
  fun setAppLocale(locale: String)
  fun setTheme(theme: VerifyblocTheme)

  companion object {
    /** The codec used by VerifyblocFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      VerifyblocFlutterApiCodec
    }
    /** Sets up an instance of `VerifyblocFlutterApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: VerifyblocFlutterApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.VerifyblocFlutterApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val partnerIdArg = args[0] as String
            val appIdArg = args[1] as String
            val privateKeyArg = args[2] as String
            var wrapped: List<Any?>
            try {
              api.initialize(partnerIdArg, appIdArg, privateKeyArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.VerifyblocFlutterApi.startVerification", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val identityTypeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.startVerification(userIdArg, identityTypeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.VerifyblocFlutterApi.setEnv", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val envArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.setEnv(envArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.VerifyblocFlutterApi.setAppLocale", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val localeArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.setAppLocale(localeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.VerifyblocFlutterApi.setTheme", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val themeArg = args[0] as VerifyblocTheme
            var wrapped: List<Any?>
            try {
              api.setTheme(themeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
