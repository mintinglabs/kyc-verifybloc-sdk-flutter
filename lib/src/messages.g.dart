// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum VerifyblocStyle {
  light,
  dark,
}

class VerifyblocTheme {
  VerifyblocTheme({
    required this.style,
    this.mainColor,
    this.buttonStyle,
  });

  VerifyblocStyle style;

  int? mainColor;

  VerifyblocButtonTheme? buttonStyle;

  Object encode() {
    return <Object?>[
      style.index,
      mainColor,
      buttonStyle?.encode(),
    ];
  }

  static VerifyblocTheme decode(Object result) {
    result as List<Object?>;
    return VerifyblocTheme(
      style: VerifyblocStyle.values[result[0]! as int],
      mainColor: result[1] as int?,
      buttonStyle: result[2] != null
          ? VerifyblocButtonTheme.decode(result[2]! as List<Object?>)
          : null,
    );
  }
}

class VerifyblocButtonTheme {
  VerifyblocButtonTheme({
    this.color,
    this.gradient,
    this.textColor,
    this.borderRadius,
  });

  int? color;

  Int32List? gradient;

  int? textColor;

  double? borderRadius;

  Object encode() {
    return <Object?>[
      color,
      gradient,
      textColor,
      borderRadius,
    ];
  }

  static VerifyblocButtonTheme decode(Object result) {
    result as List<Object?>;
    return VerifyblocButtonTheme(
      color: result[0] as int?,
      gradient: result[1] as Int32List?,
      textColor: result[2] as int?,
      borderRadius: result[3] as double?,
    );
  }
}

class _VerifyblocFlutterApiCodec extends StandardMessageCodec {
  const _VerifyblocFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is VerifyblocButtonTheme) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is VerifyblocTheme) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return VerifyblocButtonTheme.decode(readValue(buffer)!);
      case 129: 
        return VerifyblocTheme.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class VerifyblocFlutterApi {
  /// Constructor for [VerifyblocFlutterApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VerifyblocFlutterApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _VerifyblocFlutterApiCodec();

  Future<void> initialize(String arg_partnerId, String arg_appId, String arg_privateKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VerifyblocFlutterApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_partnerId, arg_appId, arg_privateKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startVerification(String arg_userId, int arg_identityType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VerifyblocFlutterApi.startVerification', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId, arg_identityType]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setEnv(int arg_env) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VerifyblocFlutterApi.setEnv', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_env]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAppLocale(String arg_locale) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VerifyblocFlutterApi.setAppLocale', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_locale]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTheme(VerifyblocTheme arg_theme) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VerifyblocFlutterApi.setTheme', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_theme]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
