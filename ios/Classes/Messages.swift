// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return (value as Any) as! T?
}

enum VerifyblocStyle: Int {
  case light = 0
  case dark = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct VerifyblocTheme {
  var style: VerifyblocStyle
  var mainColor: Int64? = nil
  var buttonStyle: VerifyblocButtonTheme? = nil

  static func fromList(_ list: [Any]) -> VerifyblocTheme? {
    let style = VerifyblocStyle(rawValue: list[0] as! Int)!
    let mainColor: Int64? = list[1] is NSNull ? nil : (list[1] is Int64? ? list[1] as! Int64? : Int64(list[1] as! Int32))
    var buttonStyle: VerifyblocButtonTheme? = nil
    if let buttonStyleList = list[2] as! [Any]? {
      buttonStyle = VerifyblocButtonTheme.fromList(buttonStyleList)
    }

    return VerifyblocTheme(
      style: style,
      mainColor: mainColor,
      buttonStyle: buttonStyle
    )
  }
  func toList() -> [Any?] {
    return [
      style.rawValue,
      mainColor,
      buttonStyle?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct VerifyblocButtonTheme {
  var color: Int64? = nil
  var gradient: FlutterStandardTypedData? = nil
  var textColor: Int64? = nil
  var borderRadius: Double? = nil

  static func fromList(_ list: [Any]) -> VerifyblocButtonTheme? {
    let color: Int64? = list[0] is NSNull ? nil : (list[0] is Int64? ? list[0] as! Int64? : Int64(list[0] as! Int32))
    let gradient: FlutterStandardTypedData? = nilOrValue(list[1])
    let textColor: Int64? = list[2] is NSNull ? nil : (list[2] is Int64? ? list[2] as! Int64? : Int64(list[2] as! Int32))
    let borderRadius: Double? = nilOrValue(list[3])

    return VerifyblocButtonTheme(
      color: color,
      gradient: gradient,
      textColor: textColor,
      borderRadius: borderRadius
    )
  }
  func toList() -> [Any?] {
    return [
      color,
      gradient,
      textColor,
      borderRadius,
    ]
  }
}
private class VerifyblocFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return VerifyblocButtonTheme.fromList(self.readValue() as! [Any])
      case 129:
        return VerifyblocTheme.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class VerifyblocFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? VerifyblocButtonTheme {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? VerifyblocTheme {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class VerifyblocFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return VerifyblocFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return VerifyblocFlutterApiCodecWriter(data: data)
  }
}

class VerifyblocFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = VerifyblocFlutterApiCodec(readerWriter: VerifyblocFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VerifyblocFlutterApi {
  func setAppLocale(locale: String) throws
  func setEnv(env: Int64) throws
  func setTheme(theme: VerifyblocTheme) throws
  func initialize(partnerId: String, appId: String, privateKey: String) throws
  func startVerification(userId: String, identityType: Int64) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VerifyblocFlutterApiSetup {
  /// The codec used by VerifyblocFlutterApi.
  static var codec: FlutterStandardMessageCodec { VerifyblocFlutterApiCodec.shared }
  /// Sets up an instance of `VerifyblocFlutterApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VerifyblocFlutterApi?) {
    let setAppLocaleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.VerifyblocFlutterApi.setAppLocale", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAppLocaleChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let localeArg = args[0] as! String
        do {
          try api.setAppLocale(locale: localeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAppLocaleChannel.setMessageHandler(nil)
    }
    let setEnvChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.VerifyblocFlutterApi.setEnv", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setEnvChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let envArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.setEnv(env: envArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setEnvChannel.setMessageHandler(nil)
    }
    let setThemeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.VerifyblocFlutterApi.setTheme", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setThemeChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let themeArg = args[0] as! VerifyblocTheme
        do {
          try api.setTheme(theme: themeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setThemeChannel.setMessageHandler(nil)
    }
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.VerifyblocFlutterApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let partnerIdArg = args[0] as! String
        let appIdArg = args[1] as! String
        let privateKeyArg = args[2] as! String
        do {
          try api.initialize(partnerId: partnerIdArg, appId: appIdArg, privateKey: privateKeyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let startVerificationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.VerifyblocFlutterApi.startVerification", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startVerificationChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        let identityTypeArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        do {
          try api.startVerification(userId: userIdArg, identityType: identityTypeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startVerificationChannel.setMessageHandler(nil)
    }
  }
}
